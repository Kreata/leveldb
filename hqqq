diff --git a/util/hot_backup.cc b/util/hot_backup.cc
index 10a05fd..8602807 100644
--- a/util/hot_backup.cc
+++ b/util/hot_backup.cc
@@ -133,7 +133,7 @@ HotBackup::ResetTrigger()
 void
 HotBackup::HotBackupScheduled()
 {
-    inc_and_fetch(&JobsPending);
+    inc_and_fetch(&m_JobsPending);
 
     return;
 
@@ -148,7 +148,7 @@ HotBackup::HotBackupFinished()
 {
     int ret_val;
 
-    ret_val=dec_and_fetch(&JobsPending);
+    ret_val=dec_and_fetch(&m_JobsPending);
 
     // 1 means CheckHotBackupTrigger()'s counter is only
     //   one left
@@ -185,12 +185,11 @@ DBImpl::HotBackup()
         assert(false==hotbackup_pending_);
         if (!hotbackup_pending_)
         {
-            hotbackup_pending_=true;
-
             // test if shutting_down,
             if (!shutting_down_.Acquire_Load())
             {
                 create_backup_event=true;
+                hotbackup_pending_=true;
             }   // if
             else
             {
@@ -226,13 +225,9 @@ HotBackupTask::operator()()
     bool good;
     long log_position(0);
 
-    /**** make each a function of HotBackupTask to facilitate unit test creation ****/
     // rotate directories (tiered storage reminder)
     good=gHotBackup->PrepareDirectories(m_DBImpl.GetOptions());
 
-    // grab mutex here or where?
-    // ??? ++running_compactions_;  with mutex held
-
     // purge imm or current write buffer
     good=good && m_DBImpl.PurgeWriteBuffer();
 
diff --git a/util/hot_backup.h b/util/hot_backup.h
index 3d05a6a..0be2553 100644
--- a/util/hot_backup.h
+++ b/util/hot_backup.h
@@ -58,10 +58,10 @@ class HotBackup
 protected:
 
     // tracks how many databases are still processing a hot backup request
-    volatile uint64_t JobsPending;
+    volatile uint64_t m_JobsPending;
 
 public:
-    HotBackup() : JobsPending(0) {};
+    HotBackup() : m_JobsPending(0) {};
     virtual ~HotBackup() {};
 
     // next two routines are for unit test support
@@ -72,7 +72,7 @@ public:
     virtual const char * GetTriggerPath() {return(config::kTriggerFileName);};
 
 
-    uint64_t GetJobsPending() {return(add_and_fetch(&JobsPending, (uint64_t)0));};
+    uint64_t GetJobsPending() {return(add_and_fetch(&m_JobsPending, (uint64_t)0));};
 
     // Called by each database that is initiating a hot backup.  Blocks
     //  future hot backups until finished.
